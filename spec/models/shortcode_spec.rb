RSpec.describe Shortcode do
  let(:shortcode) { 'ExampleLink' }
  let(:bad_shortcode) { 'Ex1' }
  let(:url) { 'https://example.com' }

  describe '.find' do
    before do
      Storage.instance.store(shortcode, url)
    end

    it 'finds an existing record' do
      record = Shortcode.find(shortcode)

      expect(record).to be_a(Shortcode)
      expect(record.url).to eq url
    end

    it 'returns nil if nothing found' do
      expect do
        Shortcode.find('NoCode')
      end.to raise_error(ShortcodeNotFound)
    end
  end

  describe '.create' do
    context 'with predefined shortcode' do
      it 'raises an error on bad shortcode' do
        expect do
          Shortcode.create(url, bad_shortcode)
        end.to raise_error(MalformedShortcode)
      end
    end

    context 'with autogenerated shortcode' do
      it 'generates a shortcode' do
        record = Shortcode.create(url, nil)
        expect(record.shortcode).to match(/^[0-9a-zA-Z_]{6}$/)
      end
    end
  end
end
